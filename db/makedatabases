#!/bin/bash
# Copyright (C) 2011, 2012, 2015, 2016 The Meme Factory, Inc.,
#   http://www.meme.com/
# Copyright (C) 2003, 2004, 2005, 2008, 2011 Karl O. Pinc
#
#    This file is part of PLHDB2.
#
#    PLHDB2 is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PLHDB2.  If not, see <http://www.gnu.org/licenses/>.
#
# Creates empty plhdb database(s), secures postgresql, and creates superuser.
#
# Karl O. Pinc <kop@meme.com>
#
# Remarks:
#
# Creates the postgresql user 'plhdb_admin' who owns all the databases
# and is a superuser able to create other users but not databases.
# As pldhdb_admin owns the databases only he can create/drop tables etc.
# The user posgresql remains and can create users and databases.

# Constants
#export SERVERHOST=localhost
# Use Unix socket
export SERVERHOST=/tmp
export PGSERVERHOST=/tmp

# SQL generation functions

make_schemas_sql () {
#
# Make all the schemas for a database and assign privilges.
#
# Syntax: make_schemas_sql db

export db="$1"
cat <<-EOF

--
-- Setup all the schemas for $db and assign privileges.
--

-- The public schema is not needed.
DROP SCHEMA public;
	  
-- The plhdb schema where the production system lives.

CREATE SCHEMA plhdb;

GRANT USAGE ON SCHEMA plhdb TO plhdb_managers
                                , plhdb_users;

COMMENT ON SCHEMA plhdb IS
  'Official PLHDB tables, views, etc.';

-- The sandbox schema.
-- Used by the scientists to extend plhdb.

CREATE SCHEMA sandbox;

GRANT ALL PRIVILEGES ON SCHEMA sandbox TO plhdb_managers;
GRANT USAGE ON SCHEMA sandbox TO plhdb_users;

COMMENT ON SCHEMA sandbox IS
  'Shared area for plhdb working group to experiment with new tables, etc.; '
  'database objects shared amongst group members in the same fashion as '
  'those database objects in the "plhdb" schema.';

-- Set the schema search path.
ALTER DATABASE $db SET SEARCH_PATH TO
    plhdb
  , sandbox
  , '\$user';

EOF
}


install_tablefunc () {
#
# Install tablefunc module
#
# Syntax: install_tablefunc database
#
# Input:
#  database   Name of the database in which to install module.
#
# Remarks:

# Parse args
db=$1

# Grant permissions.
psql -U plhdb_admin -h $SERVERHOST $db <<EOF

CREATE EXTENSION tablefunc SCHEMA plhdb;

EOF
}

make_roles_sql () {
#
# Make the roles for the cluster

cat <<-EOF

-- Create the plhdb_admin superuser.
CREATE ROLE plhdb_admin 
  WITH ENCRYPTED PASSWORD 'foo' LOGIN CREATEDB SUPERUSER;
- No password yet, as it's a hassle for the script.
-- CREATE ROLE plhdb_admin LOGIN CREATEDB SUPERUSER;
COMMENT ON ROLE plhdb_admin IS
  'Role (user) used by system build tools to construct system.';

CREATE ROLE demo_user LOGIN;
COMMENT ON ROLE demo_user IS
  'Role (user) used when connecting the public at large '
  'to the demo database.';

--
-- Make the groups we'll want.
--

-- The managers group can change things and read things.
CREATE ROLE plhdb_managers;
COMMENT ON ROLE plhdb_managers IS
  'Role (group) who''s members have "system manager" access.';

-- The users group can only view the data, except for study data.
-- The study data is controlled by the row-level permission system.
CREATE ROLE plhdb_users;
COMMENT ON ROLE plhdb_users IS
  'Role (group) who''s members have "study user" access.';

EOF
}

create_database_sql () {
#
# Make code to make a db
#
# Syntax: create_database_sql db
#
# Input:
#   db  The database to create
#

# Parse args
db=$1

cat <<-EOF

-- Create the databases.
CREATE DATABASE $db;

-- Secure connection to the new db
REVOKE CONNECT ON DATABASE $db FROM PUBLIC;
GRANT CONNECT ON DATABASE $db TO plhdb_managers
                               , plhdb_users;

-- We use us date formatting, not european.
ALTER DATABASE $db SET DATESTYLE='MDY';

-- Default all times to US/Eastern times.
ALTER DATABASE $db SET TIMEZONE='US/Eastern';
EOF
}

#
# Tell the user what password he needs.
#
echo
echo WARNING: If this goes bad it could destroy your
echo template1 database.  You might want to press
echo CTRL-C now if you "don't" have a backup.
echo
echo If you blow any of password entries, just re-run
echo this script and enter the password for the 'part(s)'
echo you got wrong.
echo
echo Creating databases.
echo
echo When prompted for a password please enter the
echo "password for the database user 'postgres'."
echo "(With the default pg_hba file you won't need a password"
echo "for the 'postgres' user, which is bad.)"

#
# Setup users and groups
#

#DEBUG# cat <<-EOF
psql -U postgres -h $PGSERVERHOST template1 <<-EOF

--
-- Make the groups we'll want.
--
$(make_roles_sql)

EOF

#
# Now do work as the plhdb_admin user to make the databases.
#

#
# Tell the user what password he needs.
#
echo
echo When prompted for a password please enter the
echo "password for the database user 'plhdb_admin'"
echo which is now: foo

#DEBUG# cat <<-EOF
export PGPASSWORD=foo
psql -U plhdb_admin -h $SERVERHOST template1 <<-EOF

$(create_database_sql plhdb)
COMMENT ON DATABASE plhdb IS
  'Production database of the PLHDB group.';

$(create_database_sql plhdb_test)
COMMENT ON DATABASE plhdb_test IS
  'An occasionally erased and re-created copy of the production PLHDB '
  'database.  Used for data manipulation experiments by PLHDB group members '
  'and related testing.';

$(create_database_sql plhdb_copy)
COMMENT ON DATABASE plhdb_copy IS
  'Version of the PLHDB database used for software development.';

$(create_database_sql plhdb_demo)
COMMENT ON DATABASE plhdb_demo IS
  'A small and possibly fictional subset of sample PLHDB data made publicly '
  'accessable to demonstrate the PLHDB system.';

-- The plhdb superuser cannot create more databases.
ALTER ROLE plhdb_admin WITH NOCREATEDB;

\c plhdb
$(make_schemas_sql plhdb)
\c plhdb_test
$(make_schemas_sql plhdb_test)
\c plhdb_copy
$(make_schemas_sql plhdb_copy)
\c plhdb_demo
$(make_schemas_sql plhdb_demo)

-- Establish permissions in the plhdb_demo db for the demo_user user.
GRANT CONNECT ON DATABASE plhdb_demo TO  plhdb_managers
                                       , plhdb_users
                                       , demo_user;
GRANT USAGE ON SCHEMA plhdb TO demo_user;
GRANT USAGE ON SCHEMA sandbox TO demo_user;
CREATE SCHEMA demo_user;
GRANT USAGE ON SCHEMA demo_user TO plhdb_managers
                                 , plhdb_users
                                 , demo_user;
ALTER DATABASE plhdb_demo SET SEARCH_PATH TO
    plhdb
  , sandbox
  , demo_user;


EOF

# Add crosstab support
install_tablefunc plhdb
install_tablefunc plhdb_test
install_tablefunc plhdb_copy
install_tablefunc plhdb_demo

#
# Tell the user to secure the system.
#
echo The plhdb_admin Postgresql user needs a password
echo "to login.  Change it (as the postgres user) with the command:"
echo
echo '   ' psql -U postgres -h $PGSERVERHOST -d plhdb '\'
echo "    " -c '"ALTER ROLE plhdb_admin WITH ENCRYPTED PASSWORD' "'foo';"'"'
echo
echo "The demo_user user needs a password, set it (as the postgres) user"
echo "with the command:"
echo
echo '   ' psql -U postgres -h $PGSERVERHOST -d plhdb '\'
echo "    " -c '"ALTER ROLE demo_user WITH ENCRYPTED PASSWORD' "'foo';"'"'
echo
echo "You will also need to edit the adminer/demo/index.php file after"
echo "installation and specify the demo user's password therein."
