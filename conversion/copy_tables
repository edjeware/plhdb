#!/bin/sh
# Copyright (C) 2016 The Meme Factory, Inc.  http://www.meme.com/
#
#    This file is part of PLHDB2.
#
#    PLDHB2 is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Babase.  If not, see <http://www.gnu.org/licenses/>.
#
# Karl O. Pinc <kop@meme.com>
#
# Syntax: copy_tables fromdb todb
#
# Remarks:
#   Copies the database content.

sourcedb=$1
targetdb=$2

copy_table() {
  local fromdb=$1
  local todb=$2
  local table=$3

  pg_dump -U plhdb_admin -Fc --data-only \
          --table=plhdb.$table --dbname=$fromdb \
    | pg_restore -U plhdb_admin --dbname $todb
}

#for t in '' ; do
#  copy_table $sourcedb $targetdb $t
#done

# Site
{ psql -q --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO site (siteid, name, latitude, longitude'
            '                , geodetic_datum) '
            'VALUES (%s, %s, %s, %s, %s);'
          , site_oid, quote_literal(name)
          , CASE WHEN latitude IS NULL
                   THEN 'NULL'
                   ELSE latitude::TEXT END
          , CASE WHEN longitude IS NULL
                   THEN 'NULL'
                   ELSE longitude::TEXT END
          , CASE WHEN geodetic_datum IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(geodetic_datum) END)
          FROM plhdb.site;
EOF
} \
  | psql -q -U plhdb_admin $targetdb

# Taxon
{ psql -q --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO taxon (taxonid, scientific_name, common_name) '
            'VALUES (%s, %s, %s);'
          , taxon_oid, quote_literal(scientific_name)
          , CASE WHEN common_name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(common_name) END)
          FROM plhdb.taxon;
EOF
} \
  | psql -q -U plhdb_admin $targetdb

# Study
{ psql -q --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO study (sid, name, owners, taxonid, siteid) '
            'VALUES (%s, %s, %s, %s, %s);'
          , quote_literal(id)
          , CASE WHEN name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(name) END
          , quote_literal(owners), taxon_oid, site_oid)
          FROM plhdb.study;
EOF
} \
  | psql -q -U plhdb_admin $targetdb

# Hardcode the probablity_types, which come from the old cvterm table.
psql -q -U plhdb_admin $targetdb <<EOF
INSERT INTO probability_type (code, name)
  VALUES ('N', 'normal distribution')
       , ('U', 'uniform distribution');
EOF

# Hardcode the start events, which come from the old cvterm table.
psql -q -U plhdb_admin $targetdb <<EOF
INSERT INTO start_event (code, name)
  VALUES ('B', 'birth')
       , ('I', 'immigration into population')
       , ('C', 'confirmed identification')
       , ('O', 'beginning of observation');
EOF

# Hardcode the end events, which come from the old cvterm table.
psql -q -U plhdb_admin $targetdb <<EOF
INSERT INTO end_event (code, name)
  VALUES ('O', 'end of observation')
       , ('D', 'death')
       , ('E', 'emigration from population')
       , ('P', 'permanent disappearance');
EOF


# Biography
{ psql -q --tuples-only -U plhdb_admin $sourcedb <<\EOF
  BEGIN;
    --
    -- Cleanup biography before dumping it.
    --

    -- Copy table
    SELECT *
      INTO TEMP TABLE fixed_biography
      FROM biography;
    CREATE INDEX fb_anim_oid ON fixed_biography (anim_oid);

    -- Apply "fixes" to the data.

    -- departdate/departdateerror/bdmax problem.  (4 rows)
    UPDATE fixed_biography
      SET departdate = bdmax
      WHERE departdate < bdmax
            AND departdateerror = 0;

    -- birthdate > bdmax (3 rows)
    UPDATE fixed_biography
      SET bdmax = birthdate
      WHERE bdmax < birthdate;

    -- bdmin > birthdate (3 rows)
    UPDATE fixed_biography
      SET bdmin = birthdate
      WHERE bdmin > birthdate;

    -- entrydate > departdate (1 row)
    UPDATE fixed_biography
      SET entrydate = departdate
      WHERE departdate < entrydate;

    -- birthdate > entrydate (1 row)  (One of the duplicates?)
    UPDATE fixed_biography
      SET birthdate = entrydate
      WHERE entrydate < birthdate;

    -- "Dump" data
        SELECT FORMAT(
            'INSERT INTO biography (bid'
                                 ', studyid'
                                 ', animid'
                                 ', animname'
                                 ', birthdate'
                                 ', bdmin'
                                 ', bdmax'
                                 ', bddist'
                                 ', birthgroup'
                                 ', bgqual'
                                 ', firstborn'
                                 ', mombid'
                                 ', sex'
                                 ', entrydate'
                                 ', entrytype'
                                 ', departdate'
                                 ', departtype'
                                 ', departdateerror) '
            'VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s'
                  ', %s, %s, %s, %s, %s, %s, %s, %s, %s);'
          , b.anim_oid
          , quote_literal(b.studyid)
          , quote_literal(b.animid)
          , CASE WHEN b.animname IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.animname)) END
          , quote_literal(b.birthdate::TEXT)
          , CASE WHEN b.bdmin IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmin::TEXT) END
          , CASE WHEN b.bdmax IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmax::TEXT) END
          , quote_literal(b.bddist)
          , CASE WHEN b.birthgroup IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.birthgroup)) END
          , CASE WHEN b.bgqual IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bgqual) END
          , CASE WHEN b.firstborn IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.firstborn) END
          , CASE WHEN m.anim_oid IS NULL
                   THEN 'NULL'
                   ELSE m.anim_oid::TEXT END
          , quote_literal(b.sex)
          , quote_literal(b.entrydate::TEXT)
          , quote_literal(b.entrytype)
          , quote_literal(b.departdate::TEXT)
          , quote_literal(b.departtype)
          , b.departdateerror)
          FROM fixed_biography AS b
               LEFT OUTER JOIN fixed_biography AS m
                 ON (m.studyid = b.studyid
                     AND m.animid = b.momid)
          ORDER BY b.birthdate;
  ROLLBACK;
EOF
} \
  | psql -q -U plhdb_admin $targetdb
