#!/bin/sh
# Copyright (C) 2016 The Meme Factory, Inc.  http://www.meme.com/
#
#    This file is part of PLHDB2.
#
#    PLDHB2 is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Babase.  If not, see <http://www.gnu.org/licenses/>.
#
# Karl O. Pinc <kop@meme.com>
#
# Syntax: copy_tables [--fix] fromdb todb
#
# Input:
#   --fix   Fixup the data while copying (otherwise errors are reported)
#   fromdb  Database to copy from
#   todb    Database to copy into
#
# Remarks:
#   Copies the database content.

if [ "$1" = '--fix' ] ; then
  fix=y
  shift
else
  fix=n
fi

sourcedb=$1
targetdb=$2

make_biography_sql() {
cat - <<\EOF
    --
    -- Cleanup biography before dumping it.
    --

    --  Get individuals existing only as moms for normal study individuals
    -- (This just happens to the the query that "works".)
    SELECT i.individual_oid AS anim_oid, study.id AS studyid , i.id AS animid
      INTO TEMP TABLE momsonly
      FROM plhdb.individual AS i
           JOIN plhdb.study ON (study.study_oid = i.study_oid)
      WHERE EXISTS
        (SELECT 1
           FROM biography AS b
           WHERE i.id = b.momid
                 AND NOT EXISTS
                   (SELECT 1
                      FROM biography AS m
                      WHERE m.studyid = b.studyid
                            AND m.animid = b.momid))
        AND sex IS NULL;

    -- Dump the mom's
    SELECT FORMAT(
      'INSERT INTO biography (bid, studyid, animid, sex, momonly)'
      '  VALUES (%s, %s, %s, ''F'', TRUE);'
         , anim_oid, quote_literal(studyid), quote_literal(animid))
      FROM momsonly
      ORDER BY studyid, animid;

    --
    -- Copy biography table
    --
    SELECT *
      INTO TEMP TABLE fixed_biography
      FROM biography;
    CREATE INDEX fb_anim_oid ON fixed_biography (anim_oid);

EOF

if [ "$fix" = "y" ] ; then
    cat - <<\EOF
      -- Apply "fixes" to the data.

      -- departdate/departdateerror/bdmax problem.  (4 rows)
      -- Just happens that that's the only bdmax/departdate problems.
      UPDATE fixed_biography
        SET departdate = bdmax
        WHERE departdate < bdmax
              AND departdateerror = 0;

      -- birthdate > bdmax (3 rows)
      UPDATE fixed_biography
        SET bdmax = birthdate
        WHERE bdmax < birthdate;

      -- bdmin > birthdate (3 rows)
      UPDATE fixed_biography
        SET bdmin = birthdate
        WHERE bdmin > birthdate;

      -- entrydate > departdate (1 row)
      UPDATE fixed_biography
        SET entrydate = departdate
        WHERE departdate < entrydate;

      -- birthdate > entrydate (1 row)  (One of the duplicates?)
      UPDATE fixed_biography
        SET birthdate = entrydate
        WHERE entrydate < birthdate;

      -- bdmin is NULL (19 rows, study 5)
      UPDATE fixed_biography
        SET bdmin = birthdate
        WHERE bdmin IS NULL;

      -- bdmax is NULL (19 rows, study 5)
      UPDATE fixed_biography
        SET bdmax = birthdate
        WHERE bdmax IS NULL;

      -- There's a male who's a mother
      UPDATE fixed_biography
        SET sex = 'F'
        WHERE anim_oid = 13250;

      -- Normal birthdate distributions where the birthdate is not at
      -- the midpoint are changed to uniform distributions.
      UPDATE fixed_biography
        SET bddist = 'U'
        WHERE bddist = 'N'
              AND ABS((birthdate::DATE - bdmin::DATE)
                      - (bdmax::DATE - birthdate::DATE))
                     > 1 ;

      -- Change non-female individuals who have fertility intervals
      -- to female.
      UPDATE fixed_biography
        SET sex = 'F'
        WHERE sex <> 'F'
              AND EXISTS (
                    SELECT 1
                      FROM femalefertilityinterval AS ffi
                      WHERE ffi.anim_oid = fixed_biography.anim_oid);
EOF
fi

cat - <<\EOF

    -- Remember which rows are "regular"
    ALTER TABLE fixed_biography ADD COLUMN momonly BOOLEAN;
    UPDATE fixed_biography SET momonly = FALSE;

    -- Copy momonly rows into fixed_biography so that regular individuals
    -- who reference them as mom's can get them.
    INSERT INTO fixed_biography(anim_oid, studyid, animid, sex, momonly)
      SELECT anim_oid, studyid, animid, 'F', TRUE
        FROM momsonly;

    -- "Dump" data
        SELECT FORMAT(
            'INSERT INTO biography (bid'
                                 ', studyid'
                                 ', animid'
                                 ', animname'
                                 ', momonly'
                                 ', birthdate'
                                 ', bdmin'
                                 ', bdmax'
                                 ', bddist'
                                 ', birthgroup'
                                 ', bgqual'
                                 ', firstborn'
                                 ', mombid'
                                 ', sex'
                                 ', entrydate'
                                 ', entrytype'
                                 ', departdate'
                                 ', departtype'
                                 ', departdateerror) '
            'VALUES (%s, %s, %s, %s, FALSE, %s, %s, %s, %s, %s'
                  ', %s, %s, %s, %s, %s, %s, %s, %s, %s);'
          , b.anim_oid
          , quote_literal(b.studyid)
          , quote_literal(b.animid)
          , CASE WHEN b.animname IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.animname)) END
          , quote_literal(b.birthdate::TEXT)
          , CASE WHEN b.bdmin IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmin::TEXT) END
          , CASE WHEN b.bdmax IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmax::TEXT) END
          , quote_literal(b.bddist)
          , CASE WHEN b.birthgroup IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.birthgroup)) END
          , CASE WHEN b.bgqual IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bgqual) END
          , CASE WHEN b.firstborn IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.firstborn) END
          , CASE WHEN m.anim_oid IS NULL
                   THEN 'NULL'
                   ELSE m.anim_oid::TEXT END
          , quote_literal(b.sex)
          , quote_literal(b.entrydate::TEXT)
          , quote_literal(b.entrytype)
          , quote_literal(b.departdate::TEXT)
          , quote_literal(b.departtype)
          , b.departdateerror)
          FROM fixed_biography AS b
               LEFT OUTER JOIN fixed_biography AS m
                 ON (m.studyid = b.studyid
                     AND m.animid = b.momid)
          WHERE NOT(b.momonly)
          ORDER BY b.birthdate;

    -- Update sequence.
    SELECT 'DO $$ BEGIN
              PERFORM SETVAL(''biography_bid_seq''
                          , MAX(biography.bid))
                FROM biography; END;$$;';
EOF
}

make_ffi_sql () {
  cat - <<\EOF
    SELECT *
      INTO TEMP TABLE fixed_ffi
      FROM femalefertilityinterval;
    CREATE INDEX fffi_anim_oid ON fixed_ffi (anim_oid);
EOF


  if [ "$fix" = "y" ] ; then
    cat - <<\EOF
      -- Apply fixes to female fertility data.

      -- Female fertility stop dates after departdate + error get changed
      -- to departdate + error.
      WITH b AS (
        SELECT bio.anim_oid AS bid
             , bio.departdate::date + CEIL(bio.departdateerror * 365.25)::INT
                 AS last_departdate
          FROM fixed_biography AS bio
          WHERE EXISTS (
                  SELECT 1
                    FROM fixed_ffi
                    WHERE fixed_ffi.anim_oid = bio.anim_oid
                          AND (bio.departdate::date
                               + CEIL(bio.departdateerror * 365.25)::INT)
                              < fixed_ffi.stopdate))
      UPDATE fixed_ffi
        SET stopdate = b.last_departdate
        FROM b
        WHERE b.bid = fixed_ffi.anim_oid
              AND b.last_departdate < stopdate;

      -- Female fertility start dates before entrydate

      -- Get rid of row that looks like bunk
      -- (Maybe it belongs to another individual, but what can we do?)
      DELETE FROM fixed_ffi WHERE interval_oid = 15050;

      -- Change startdate to entrydate
      UPDATE fixed_ffi
        SET startdate = b.entrydate
--        , stopdate = CASE WHEN stopdate > b.entrydate
--                            THEN stopdate
--                          ELSE b.entrydate END
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND fixed_ffi.startdate < b.entrydate;


      -- Fertility stopdate > departdate when death or
      -- permanent disappearance.  Make stopdate = departdate.
      UPDATE fixed_ffi
        SET stopdate = departdate
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND (fixed_ffi.stoptype = 'D'
                   OR fixed_ffi.stoptype = 'P')
              AND fixed_ffi.stopdate > b.departdate
              AND fixed_ffi.stopdate = (
               SELECT MAX(f.stopdate)
                 FROM fixed_ffi AS f
                 WHERE f.anim_oid = b.anim_oid);

      -- Fertility stopdate < departdate when death or
      -- permanent disappearance.  Change stoptype to end of observation.
      UPDATE fixed_ffi
        SET stoptype = 'O'
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND (fixed_ffi.stoptype = 'D'
                   OR fixed_ffi.stoptype = 'P')
              AND fixed_ffi.stopdate < b.departdate
              AND fixed_ffi.stopdate = (
               SELECT MAX(f.stopdate)
                 FROM fixed_ffi AS f
                 WHERE f.anim_oid = b.anim_oid);

      -- Fertility startdate < entrydate when birth.
      -- Make startdate = entrydate.
      UPDATE fixed_ffi
        SET startdate = entrydate
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND fixed_ffi.starttype = 'B'
              AND fixed_ffi.startdate < b.entrydate
              AND fixed_ffi.startdate = (
               SELECT MIN(f.startdate)
                 FROM fixed_ffi AS f
                 WHERE f.anim_oid = b.anim_oid);

      -- Fertility startdate > entrydate when birth.
      -- Make startdate = entrydate.
      UPDATE fixed_ffi
        SET starttype = 'O'
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND fixed_ffi.starttype = 'B'
              AND fixed_ffi.startdate > b.entrydate
              AND fixed_ffi.startdate = (
               SELECT MIN(f.startdate)
                 FROM fixed_ffi AS f
                 WHERE f.anim_oid = b.anim_oid);

      -- Fertility stopdate = departdate but stoptype <> departtype.
      -- Change stoptype to departtype.
      UPDATE fixed_ffi
        SET stoptype = b.departtype
        FROM fixed_biography AS b
        WHERE b.anim_oid = fixed_ffi.anim_oid
              AND b.departdate = fixed_ffi.stopdate
              AND b.departtype <> fixed_ffi.stoptype;

      -- Fertility intervals cannot overlap
      -- Change Study 7, animid 'CT--', startdate 2004-01-01 to stopdate
      -- 2015-03-31.  Bump startdate so it does not overlap 2001-01-01
      -- to 2004-09-01.
      UPDATE fixed_ffi
        SET startdate = '2004-09-02'
        WHERE fixed_ffi.interval_oid = 15287;
EOF
  fi

  cat - <<\EOF
        SELECT FORMAT(
            'INSERT INTO fertility '
            '  (fid, bid, startdate, starttype, stopdate, stoptype) '
            'VALUES (%s, %s, %s, %s, %s, %s);'
          , interval_oid
          , anim_oid
          , quote_literal(startdate)
          , quote_literal(starttype)
          , quote_literal(stopdate)
          , quote_literal(stoptype))
          FROM fixed_ffi;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''fertility_fid_seq''
                              , MAX(fertility.fid))
                    FROM fertility; END;$$;';
EOF
}


{
  echo 'BEGIN;'
  m4 -D site_key=site_oid -D taxon_key=taxon_oid -D study_key=id convert.m4
  make_biography_sql
  make_ffi_sql
  echo 'ROLLBACK;'
} \
  | psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb \
  | psql -q --tuples-only -U plhdb_admin $targetdb
