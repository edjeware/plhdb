#!/bin/sh
# Copyright (C) 2016 The Meme Factory, Inc.  http://www.meme.com/
#
#    This file is part of PLHDB2.
#
#    PLDHB2 is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Babase.  If not, see <http://www.gnu.org/licenses/>.
#
# Karl O. Pinc <kop@meme.com>
#
# Syntax: copy_tables [--fix] fromdb todb
#
# Input:
#   --fix   Fixup the data while copying (otherwise errors are reported)
#   fromdb  Database to copy from
#   todb    Database to copy into
#
# Remarks:
#   Copies the database content.

if [ "$1" = '--fix' ] ; then
  fix=y
  shift
else
  fix=n
fi

sourcedb=$1
targetdb=$2

copy_table() {
  local fromdb=$1
  local todb=$2
  local table=$3

  pg_dump -U plhdb_admin -Fc --data-only \
          --table=plhdb.$table --dbname=$fromdb \
    | pg_restore -U plhdb_admin --dbname $todb
}

make_sql() {
cat - <<\EOF
  BEGIN;

    --
    -- Cleanup biography before dumping it.
    --

    --  Get individuals existing only as moms for normal study individuals
    -- (This just happens to the the query that "works".)
    SELECT i.individual_oid AS anim_oid, study.id AS studyid , i.id AS animid
      INTO TEMP TABLE momsonly
      FROM plhdb.individual AS i
           JOIN plhdb.study ON (study.study_oid = i.study_oid)
      WHERE EXISTS
        (SELECT 1
           FROM biography AS b
           WHERE i.id = b.momid
                 AND NOT EXISTS
                   (SELECT 1
                      FROM biography AS m
                      WHERE m.studyid = b.studyid
                            AND m.animid = b.momid))
        AND sex IS NULL;

    -- Dump the mom's
    SELECT FORMAT(
      'INSERT INTO biography (bid, studyid, animid, sex, momonly)'
      '  VALUES (%s, %s, %s, ''F'', TRUE);'
         , anim_oid, quote_literal(studyid), quote_literal(animid))
      FROM momsonly
      ORDER BY studyid, animid;

    --
    -- Copy biography table
    --
    SELECT *
      INTO TEMP TABLE fixed_biography
      FROM biography;
    CREATE INDEX fb_anim_oid ON fixed_biography (anim_oid);

EOF

if [ "$fix" = "y" ] ; then
    cat - <<\EOF
      -- Apply "fixes" to the data.

      -- departdate/departdateerror/bdmax problem.  (4 rows)
      UPDATE fixed_biography
        SET departdate = bdmax
        WHERE departdate < bdmax
              AND departdateerror = 0;

      -- birthdate > bdmax (3 rows)
      UPDATE fixed_biography
        SET bdmax = birthdate
        WHERE bdmax < birthdate;

      -- bdmin > birthdate (3 rows)
      UPDATE fixed_biography
        SET bdmin = birthdate
        WHERE bdmin > birthdate;

      -- entrydate > departdate (1 row)
      UPDATE fixed_biography
        SET entrydate = departdate
        WHERE departdate < entrydate;

      -- birthdate > entrydate (1 row)  (One of the duplicates?)
      UPDATE fixed_biography
        SET birthdate = entrydate
        WHERE entrydate < birthdate;

      -- bdmin is NULL (19 rows, study 5)
      UPDATE fixed_biography
        SET bdmin = birthdate
        WHERE bdmin IS NULL;

      -- bdmax is NULL (19 rows, study 5)
      UPDATE fixed_biography
        SET bdmax = birthdate
        WHERE bdmax IS NULL;

      -- There's a male who's a mother
      UPDATE fixed_biography
        SET sex = 'F'
        WHERE anim_oid = 13250;

      -- Normal birthdate distributions where the birthdate is not at
      -- the midpoint are changed to uniform distributions.
      UPDATE fixed_biography
        SET bddist = 'U'
        WHERE bddist = 'N'
              AND ABS((birthdate::DATE - bdmin::DATE)
                      - (bdmax::DATE - birthdate::DATE))
                     > 1 ;
EOF
fi

cat - <<\EOF

    -- Remember which rows are "regular"
    ALTER TABLE fixed_biography ADD COLUMN momonly BOOLEAN;
    UPDATE fixed_biography SET momonly = FALSE;

    -- Copy momonly rows into fixed_biography so that regular individuals
    -- who reference them as mom's can get them.
    INSERT INTO fixed_biography(anim_oid, studyid, animid, sex, momonly)
      SELECT anim_oid, studyid, animid, 'F', TRUE
        FROM momsonly;

    -- "Dump" data
        SELECT FORMAT(
            'INSERT INTO biography (bid'
                                 ', studyid'
                                 ', animid'
                                 ', animname'
                                 ', momonly'
                                 ', birthdate'
                                 ', bdmin'
                                 ', bdmax'
                                 ', bddist'
                                 ', birthgroup'
                                 ', bgqual'
                                 ', firstborn'
                                 ', mombid'
                                 ', sex'
                                 ', entrydate'
                                 ', entrytype'
                                 ', departdate'
                                 ', departtype'
                                 ', departdateerror) '
            'VALUES (%s, %s, %s, %s, FALSE, %s, %s, %s, %s, %s'
                  ', %s, %s, %s, %s, %s, %s, %s, %s, %s);'
          , b.anim_oid
          , quote_literal(b.studyid)
          , quote_literal(b.animid)
          , CASE WHEN b.animname IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.animname)) END
          , quote_literal(b.birthdate::TEXT)
          , CASE WHEN b.bdmin IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmin::TEXT) END
          , CASE WHEN b.bdmax IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bdmax::TEXT) END
          , quote_literal(b.bddist)
          , CASE WHEN b.birthgroup IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(TRIM(BOTH FROM b.birthgroup)) END
          , CASE WHEN b.bgqual IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.bgqual) END
          , CASE WHEN b.firstborn IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(b.firstborn) END
          , CASE WHEN m.anim_oid IS NULL
                   THEN 'NULL'
                   ELSE m.anim_oid::TEXT END
          , quote_literal(b.sex)
          , quote_literal(b.entrydate::TEXT)
          , quote_literal(b.entrytype)
          , quote_literal(b.departdate::TEXT)
          , quote_literal(b.departtype)
          , b.departdateerror)
          FROM fixed_biography AS b
               LEFT OUTER JOIN fixed_biography AS m
                 ON (m.studyid = b.studyid
                     AND m.animid = b.momid)
          WHERE NOT(b.momonly)
          ORDER BY b.birthdate;

    -- Update sequence.
    SELECT 'DO $$ BEGIN
              PERFORM SETVAL(''biography_bid_seq''
                          , MAX(biography.bid))
                FROM biography; END;$$;';
  ROLLBACK;
EOF
}

#for t in '' ; do
#  copy_table $sourcedb $targetdb $t
#done

# Site
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO site (siteid, name, latitude, longitude'
            '                , geodetic_datum) '
            'VALUES (%s, %s, %s, %s, %s);'
          , site_oid, quote_literal(name)
          , CASE WHEN latitude IS NULL
                   THEN 'NULL'
                   ELSE latitude::TEXT END
          , CASE WHEN longitude IS NULL
                   THEN 'NULL'
                   ELSE longitude::TEXT END
          , CASE WHEN geodetic_datum IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(geodetic_datum) END)
          FROM plhdb.site;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''site_siteid_seq''
                              , MAX(site.siteid))
                    FROM site; END;$$;';
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Taxon
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO taxon (taxonid, scientific_name, common_name) '
            'VALUES (%s, %s, %s);'
          , taxon_oid, quote_literal(scientific_name)
          , CASE WHEN common_name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(common_name) END)
          FROM plhdb.taxon;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''taxon_taxonid_seq''
                              , MAX(taxon.taxonid))
                    FROM taxon; END;$$;';
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Study
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO study (sid, name, owners, taxonid, siteid) '
            'VALUES (%s, %s, %s, %s, %s);'
          , quote_literal(id)
          , CASE WHEN name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(name) END
          , quote_literal(owners), taxon_oid, site_oid)
          FROM plhdb.study;
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Hardcode the probablity_types, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO probability_type (code, description, symmetrical)
  VALUES ('N'
        , 'Normal distribution.  Construct the birth date probability '
          'distribution so that BDMin and BDMax represent + 2 '
          'standard deviations of Birthdate.  Birthdate must be '
          'at the midpoint of BDMin and BDMax, or one of the 2 midpoint '
          'dates when there are an even number of days in the BDMin to '
          'BDMax interval'
        , TRUE)
       , ('U'
        , 'Uniform distribution.  The probability distribution is '
          'truncated at BDMin and BDMax with equal Birthdate '
          'probability within this range.'
        , FALSE);
EOF

# Hardcode the start events, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO start_event (code, description, initial)
  VALUES ('B', 'birth', TRUE)
       , ('I', 'immigration into population', FALSE)
       , ('C', 'confirmed identification', FALSE)
       , ('O', 'beginning of observation', FALSE);
EOF

# Hardcode the end events, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO end_event (code, description, final)
  VALUES ('O', 'end of observation', FALSE)
       , ('D', 'death', TRUE)
       , ('E', 'emigration from population', FALSE)
       , ('P', 'permanent disappearance', TRUE);
EOF


# Biography
make_sql \
  | psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Femalefertilityinterval
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb <<\EOF
        SELECT FORMAT(
            'INSERT INTO femalefertilityinterval '
            '  (ffiid, bid, startdate, starttype, stopdate, stoptype) '
            'VALUES (%s, %s, %s, %s, %s, %s);'
          , interval_oid
          , anim_oid
          , quote_literal(startdate)
          , quote_literal(starttype)
          , quote_literal(stopdate)
          , quote_literal(stoptype))
          FROM femalefertilityinterval;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''femalefertilityinterval_ffiid_seq''
                              , MAX(femalefertilityinterval.ffiid))
                    FROM femalefertilityinterval; END;$$;';
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb
