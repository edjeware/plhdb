#!/bin/sh
# Copyright (C) 2016 The Meme Factory, Inc.  http://www.meme.com/
#
#    This file is part of PLHDB2.
#
#    PLDHB2 is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Babase.  If not, see <http://www.gnu.org/licenses/>.
#
# Karl O. Pinc <kop@meme.com>
#
# Syntax: copy_demo olddemo fromdb todemodb
#
# Input:
#   olddemo The old demo db
#   fromdb  Database to copy from
#   todemodb    Database to copy into
#
# Remarks:
#   Copies into todemodb those rows in fromdb which are in the olddemo db.
#
# Support tables are either generated by hand or copied from the
# old demo database.  The biography and femalefertilityinterval rows
# are chosen from the old demo db but copied from the from db to the todemodb.

tmpfile=/tmp/copy_demo.$$

cleanup () {
  rm -rf $tmpfile
}

trap cleanup EXIT

demodb=$1
sourcedb=$2
targetdb=$3


# Site
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $demodb <<\EOF
        SELECT FORMAT(
            'INSERT INTO site (siteid, name, latitude, longitude'
            '                , geodetic_datum) '
            'VALUES (%s, %s, %s, %s, %s);'
          , site_oid, quote_literal(name)
          , CASE WHEN latitude IS NULL
                   THEN 'NULL'
                   ELSE latitude::TEXT END
          , CASE WHEN longitude IS NULL
                   THEN 'NULL'
                   ELSE longitude::TEXT END
          , CASE WHEN geodetic_datum IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(geodetic_datum) END)
          FROM plhdb.site;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''site_siteid_seq''
                              , MAX(site.siteid))
                    FROM site; END;$$';
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Taxon
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $demodb <<\EOF
        SELECT FORMAT(
            'INSERT INTO taxon (taxonid, scientific_name, common_name) '
            'VALUES (%s, %s, %s);'
          , taxon_oid, quote_literal(scientific_name)
          , CASE WHEN common_name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(common_name) END)
          FROM plhdb.taxon;

        -- Update sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''taxon_taxonid_seq''
                              , MAX(taxon.taxonid))
                    FROM taxon; END;$$';
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Study
{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $demodb <<\EOF
        SELECT FORMAT(
            'INSERT INTO study (sid, name, owners, taxonid, siteid) '
            'VALUES (%s, %s, %s, %s, %s);'
          , quote_literal(id)
          , CASE WHEN name IS NULL
                   THEN 'NULL'
                   ELSE quote_literal(name) END
          , quote_literal(owners), taxon_oid, site_oid)
          FROM plhdb.study;
EOF
} \
  | psql -q --tuples-only -U plhdb_admin $targetdb

# Hardcode the probablity_types, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO probability_type (code, description, symmetrical)
  VALUES ('N'
        , 'Normal distribution.  Construct the birth date probability '
          'distribution so that BDMin and BDMax represent + 2 '
          'standard deviations of Birthdate.  Birthdate must be '
          'at the midpoint of BDMin and BDMax, or one of the 2 midpoint '
          'dates when there are an even number of days in the BDMin to '
          'BDMax interval'
        , TRUE)
       , ('U'
        , 'Uniform distribution.  The probability distribution is '
          'truncated at BDMin and BDMax with equal Birthdate '
          'probability within this range.'
        , FALSE);
EOF

# Hardcode the start events, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO start_event (code, description, initial)
  VALUES ('B', 'birth', TRUE)
       , ('I', 'immigration into population', FALSE)
       , ('C', 'confirmed identification', FALSE)
       , ('O', 'beginning of observation', FALSE);
EOF

# Hardcode the end events, which come from the old cvterm table.
psql -q --no-align -F ' ' -U plhdb_admin $targetdb <<EOF
INSERT INTO end_event (code, description, final)
  VALUES ('O', 'end of observation', FALSE)
       , ('D', 'death', TRUE)
       , ('E', 'emigration from population', FALSE)
       , ('P', 'permanent disappearance', TRUE);
EOF


# Biography and femalefertilityinterval

{ psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $demodb <<\EOF
  SELECT biography.studyid, biography.animid, biography.momid
    FROM biography
    ORDER BY biography.birthdate;
EOF
} \
  | awk 'BEGIN {print "include(copy_both.m4)"; }
         {print "copy_both(" $1 ", " $2 ", " $3 ")";}' \
  | { m4 \
      ; cat - <<\EOF

    -- Update biography sequence.
    SELECT 'DO $$ BEGIN
              PERFORM SETVAL(''biography_bid_seq''
                          , MAX(biography.bid))
                FROM biography; END;$$;';

        -- Update femalefertiltyinterval sequence.
        SELECT 'DO $$ BEGIN
                  PERFORM SETVAL(''femalefertilityinterval_ffiid_seq''
                              , MAX(femalefertilityinterval.ffiid))
                    FROM femalefertilityinterval; END;$$;';
EOF
    } \
  | psql -q --no-align -F ' ' --tuples-only -U plhdb_admin $sourcedb \
  | psql -q --tuples-only -U plhdb_admin $targetdb
